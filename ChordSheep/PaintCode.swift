//
//  PaintCode.swift
//  ChordSheep
//
//  Created by Lennart Wisbar on 14.11.20.
//  Copyright Â© 2020 Lennart Wisbar. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class PaintCode : NSObject {

    //// Cache

    private struct Cache {
        static let light: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        static let highlight: UIColor = UIColor(red: 0.250, green: 0.640, blue: 1.000, alpha: 1.000)
        static let medium: UIColor = UIColor(red: 0.100, green: 0.152, blue: 0.200, alpha: 1.000)
        static let mediumDark: UIColor = UIColor(red: 0.000, green: 0.062, blue: 0.120, alpha: 1.000)
        static let dark: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        static var imageOfHideListButton: UIImage?
        static var hideListButtonTargets: [AnyObject]?
        static var imageOfCancelButton: UIImage?
        static var cancelButtonTargets: [AnyObject]?
        static var imageOfSaveButton: UIImage?
        static var saveButtonTargets: [AnyObject]?
        static var imageOfShowListButton: UIImage?
        static var showListButtonTargets: [AnyObject]?
        static var imageOfAddButton: UIImage?
        static var addButtonTargets: [AnyObject]?
        static var imageOfPlusIconComic: UIImage?
        static var plusIconComicTargets: [AnyObject]?
        static var imageOfEditIconComic: UIImage?
        static var editIconComicTargets: [AnyObject]?
        static var imageOfPlusIcon: UIImage?
        static var plusIconTargets: [AnyObject]?
        static var imageOfEditIcon: UIImage?
        static var editIconTargets: [AnyObject]?
        static var imageOfEditIconActive: UIImage?
        static var editIconActiveTargets: [AnyObject]?
        static var imageOfPlusIconActive: UIImage?
        static var plusIconActiveTargets: [AnyObject]?
        static var imageOfEditIconSpread: UIImage?
        static var editIconSpreadTargets: [AnyObject]?
        static var imageOfAddButtonSmall: UIImage?
        static var addButtonSmallTargets: [AnyObject]?
        static var imageOfEditSongButton: UIImage?
        static var editSongButtonTargets: [AnyObject]?
    }

    //// Colors

    @objc dynamic public class var light: UIColor { return Cache.light }
    @objc dynamic public class var highlight: UIColor { return Cache.highlight }
    @objc dynamic public class var medium: UIColor { return Cache.medium }
    @objc dynamic public class var mediumDark: UIColor { return Cache.mediumDark }
    @objc dynamic public class var dark: UIColor { return Cache.dark }

    //// Drawing Methods

    @objc dynamic public class func drawHideListButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 44, height: 44), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 44, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 44, y: resizedFrame.height / 44)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 22, y: 44))
        bezierPath.addCurve(to: CGPoint(x: 44, y: 22), controlPoint1: CGPoint(x: 34.15, y: 44), controlPoint2: CGPoint(x: 44, y: 34.15))
        bezierPath.addCurve(to: CGPoint(x: 22, y: 0), controlPoint1: CGPoint(x: 44, y: 9.85), controlPoint2: CGPoint(x: 34.15, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 22), controlPoint1: CGPoint(x: 9.85, y: 0), controlPoint2: CGPoint(x: 0, y: 9.85))
        bezierPath.addCurve(to: CGPoint(x: 22, y: 44), controlPoint1: CGPoint(x: 0, y: 34.15), controlPoint2: CGPoint(x: 9.85, y: 44))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        PaintCode.mediumDark.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 29, y: 22))
        bezier2Path.addCurve(to: CGPoint(x: 18.46, y: 32), controlPoint1: CGPoint(x: 29, y: 22.43), controlPoint2: CGPoint(x: 18.92, y: 32))
        bezier2Path.addCurve(to: CGPoint(x: 18, y: 31.57), controlPoint1: CGPoint(x: 18, y: 32), controlPoint2: CGPoint(x: 18, y: 32))
        bezier2Path.addCurve(to: CGPoint(x: 27.62, y: 22), controlPoint1: CGPoint(x: 18, y: 31.13), controlPoint2: CGPoint(x: 27.62, y: 22.43))
        bezier2Path.addCurve(to: CGPoint(x: 18, y: 12.43), controlPoint1: CGPoint(x: 27.62, y: 21.57), controlPoint2: CGPoint(x: 18, y: 12.87))
        bezier2Path.addCurve(to: CGPoint(x: 18.46, y: 12), controlPoint1: CGPoint(x: 18, y: 12), controlPoint2: CGPoint(x: 18, y: 12))
        bezier2Path.addCurve(to: CGPoint(x: 29, y: 22), controlPoint1: CGPoint(x: 18.92, y: 12), controlPoint2: CGPoint(x: 29, y: 21.57))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        PaintCode.light.setFill()
        bezier2Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawCancelButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 44, height: 44), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 44, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 44, y: resizedFrame.height / 44)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 22, y: 44))
        bezierPath.addCurve(to: CGPoint(x: 44, y: 22), controlPoint1: CGPoint(x: 34.15, y: 44), controlPoint2: CGPoint(x: 44, y: 34.15))
        bezierPath.addCurve(to: CGPoint(x: 22, y: 0), controlPoint1: CGPoint(x: 44, y: 9.85), controlPoint2: CGPoint(x: 34.15, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 22), controlPoint1: CGPoint(x: 9.85, y: 0), controlPoint2: CGPoint(x: 0, y: 9.85))
        bezierPath.addCurve(to: CGPoint(x: 22, y: 44), controlPoint1: CGPoint(x: 0, y: 34.15), controlPoint2: CGPoint(x: 9.85, y: 44))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        PaintCode.mediumDark.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 13.96, y: 14))
        bezier2Path.addCurve(to: CGPoint(x: 22, y: 21.37), controlPoint1: CGPoint(x: 14.35, y: 14), controlPoint2: CGPoint(x: 20.23, y: 19.45))
        bezier2Path.addCurve(to: CGPoint(x: 30.04, y: 14), controlPoint1: CGPoint(x: 23.77, y: 19.45), controlPoint2: CGPoint(x: 29.65, y: 14))
        bezier2Path.addCurve(to: CGPoint(x: 30.5, y: 14.43), controlPoint1: CGPoint(x: 30.5, y: 14), controlPoint2: CGPoint(x: 30.5, y: 14))
        bezier2Path.addCurve(to: CGPoint(x: 22.88, y: 22), controlPoint1: CGPoint(x: 30.5, y: 14.87), controlPoint2: CGPoint(x: 22.88, y: 21.57))
        bezier2Path.addCurve(to: CGPoint(x: 30.5, y: 29.57), controlPoint1: CGPoint(x: 22.88, y: 22.43), controlPoint2: CGPoint(x: 30.5, y: 29.13))
        bezier2Path.addCurve(to: CGPoint(x: 30.04, y: 30), controlPoint1: CGPoint(x: 30.5, y: 30), controlPoint2: CGPoint(x: 30.5, y: 30))
        bezier2Path.addCurve(to: CGPoint(x: 22, y: 22.63), controlPoint1: CGPoint(x: 29.65, y: 30), controlPoint2: CGPoint(x: 23.77, y: 24.55))
        bezier2Path.addCurve(to: CGPoint(x: 13.96, y: 30), controlPoint1: CGPoint(x: 20.23, y: 24.55), controlPoint2: CGPoint(x: 14.35, y: 30))
        bezier2Path.addCurve(to: CGPoint(x: 13.5, y: 29.57), controlPoint1: CGPoint(x: 13.5, y: 30), controlPoint2: CGPoint(x: 13.5, y: 30))
        bezier2Path.addCurve(to: CGPoint(x: 21.12, y: 22), controlPoint1: CGPoint(x: 13.5, y: 29.13), controlPoint2: CGPoint(x: 21.12, y: 22.43))
        bezier2Path.addCurve(to: CGPoint(x: 13.5, y: 14.43), controlPoint1: CGPoint(x: 21.12, y: 21.57), controlPoint2: CGPoint(x: 13.5, y: 14.87))
        bezier2Path.addCurve(to: CGPoint(x: 13.96, y: 14), controlPoint1: CGPoint(x: 13.5, y: 14), controlPoint2: CGPoint(x: 13.5, y: 14))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        PaintCode.light.setFill()
        bezier2Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSaveButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 44, height: 44), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 44, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 44, y: resizedFrame.height / 44)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 22, y: 44))
        bezierPath.addCurve(to: CGPoint(x: 44, y: 22), controlPoint1: CGPoint(x: 34.15, y: 44), controlPoint2: CGPoint(x: 44, y: 34.15))
        bezierPath.addCurve(to: CGPoint(x: 22, y: 0), controlPoint1: CGPoint(x: 44, y: 9.85), controlPoint2: CGPoint(x: 34.15, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 22), controlPoint1: CGPoint(x: 9.85, y: 0), controlPoint2: CGPoint(x: 0, y: 9.85))
        bezierPath.addCurve(to: CGPoint(x: 22, y: 44), controlPoint1: CGPoint(x: 0, y: 34.15), controlPoint2: CGPoint(x: 9.85, y: 44))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        PaintCode.mediumDark.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 20, y: 29.5))
        bezier2Path.addCurve(to: CGPoint(x: 12, y: 20.96), controlPoint1: CGPoint(x: 19.57, y: 29.5), controlPoint2: CGPoint(x: 12, y: 21.42))
        bezier2Path.addCurve(to: CGPoint(x: 12.43, y: 20.5), controlPoint1: CGPoint(x: 12, y: 20.5), controlPoint2: CGPoint(x: 12, y: 20.5))
        bezier2Path.addCurve(to: CGPoint(x: 20, y: 28.12), controlPoint1: CGPoint(x: 12.87, y: 20.5), controlPoint2: CGPoint(x: 19.57, y: 28.12))
        bezier2Path.addCurve(to: CGPoint(x: 33.57, y: 14.5), controlPoint1: CGPoint(x: 20.43, y: 28.12), controlPoint2: CGPoint(x: 33.13, y: 14.5))
        bezier2Path.addCurve(to: CGPoint(x: 34, y: 14.96), controlPoint1: CGPoint(x: 34, y: 14.5), controlPoint2: CGPoint(x: 34, y: 14.5))
        bezier2Path.addCurve(to: CGPoint(x: 20, y: 29.5), controlPoint1: CGPoint(x: 34, y: 15.42), controlPoint2: CGPoint(x: 20.43, y: 29.5))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        PaintCode.light.setFill()
        bezier2Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawShowListButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 44, height: 44), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 44, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 44, y: resizedFrame.height / 44)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 22, y: 44))
        bezierPath.addCurve(to: CGPoint(x: 44, y: 22), controlPoint1: CGPoint(x: 34.15, y: 44), controlPoint2: CGPoint(x: 44, y: 34.15))
        bezierPath.addCurve(to: CGPoint(x: 22, y: 0), controlPoint1: CGPoint(x: 44, y: 9.85), controlPoint2: CGPoint(x: 34.15, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 22), controlPoint1: CGPoint(x: 9.85, y: 0), controlPoint2: CGPoint(x: 0, y: 9.85))
        bezierPath.addCurve(to: CGPoint(x: 22, y: 44), controlPoint1: CGPoint(x: 0, y: 34.15), controlPoint2: CGPoint(x: 9.85, y: 44))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        PaintCode.mediumDark.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 15, y: 22))
        bezier2Path.addCurve(to: CGPoint(x: 25.54, y: 12), controlPoint1: CGPoint(x: 15, y: 21.57), controlPoint2: CGPoint(x: 25.08, y: 12))
        bezier2Path.addCurve(to: CGPoint(x: 26, y: 12.43), controlPoint1: CGPoint(x: 26, y: 12), controlPoint2: CGPoint(x: 26, y: 12))
        bezier2Path.addCurve(to: CGPoint(x: 16.38, y: 22), controlPoint1: CGPoint(x: 26, y: 12.87), controlPoint2: CGPoint(x: 16.38, y: 21.57))
        bezier2Path.addCurve(to: CGPoint(x: 26, y: 31.57), controlPoint1: CGPoint(x: 16.38, y: 22.43), controlPoint2: CGPoint(x: 26, y: 31.13))
        bezier2Path.addCurve(to: CGPoint(x: 25.54, y: 32), controlPoint1: CGPoint(x: 26, y: 32), controlPoint2: CGPoint(x: 26, y: 32))
        bezier2Path.addCurve(to: CGPoint(x: 15, y: 22), controlPoint1: CGPoint(x: 25.08, y: 32), controlPoint2: CGPoint(x: 15, y: 22.43))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        PaintCode.light.setFill()
        bezier2Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawAddButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 44, height: 44), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 44, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 44, y: resizedFrame.height / 44)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 22, y: 44))
        bezierPath.addCurve(to: CGPoint(x: 44, y: 22), controlPoint1: CGPoint(x: 34.15, y: 44), controlPoint2: CGPoint(x: 44, y: 34.15))
        bezierPath.addCurve(to: CGPoint(x: 22, y: 0), controlPoint1: CGPoint(x: 44, y: 9.85), controlPoint2: CGPoint(x: 34.15, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 22), controlPoint1: CGPoint(x: 9.85, y: 0), controlPoint2: CGPoint(x: 0, y: 9.85))
        bezierPath.addCurve(to: CGPoint(x: 22, y: 44), controlPoint1: CGPoint(x: 0, y: 34.15), controlPoint2: CGPoint(x: 9.85, y: 44))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        PaintCode.mediumDark.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        context.saveGState()
        context.translateBy(x: 22, y: 22)
        context.rotate(by: -45 * CGFloat.pi/180)

        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: -8.04, y: -8))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: -0.63), controlPoint1: CGPoint(x: -7.65, y: -8), controlPoint2: CGPoint(x: -1.77, y: -2.55))
        bezier2Path.addCurve(to: CGPoint(x: 8.04, y: -8), controlPoint1: CGPoint(x: 1.77, y: -2.55), controlPoint2: CGPoint(x: 7.65, y: -8))
        bezier2Path.addCurve(to: CGPoint(x: 8.5, y: -7.57), controlPoint1: CGPoint(x: 8.5, y: -8), controlPoint2: CGPoint(x: 8.5, y: -8))
        bezier2Path.addCurve(to: CGPoint(x: 0.88, y: 0), controlPoint1: CGPoint(x: 8.5, y: -7.13), controlPoint2: CGPoint(x: 0.88, y: -0.43))
        bezier2Path.addCurve(to: CGPoint(x: 8.5, y: 7.57), controlPoint1: CGPoint(x: 0.88, y: 0.43), controlPoint2: CGPoint(x: 8.5, y: 7.13))
        bezier2Path.addCurve(to: CGPoint(x: 8.04, y: 8), controlPoint1: CGPoint(x: 8.5, y: 8), controlPoint2: CGPoint(x: 8.5, y: 8))
        bezier2Path.addCurve(to: CGPoint(x: -0, y: 0.63), controlPoint1: CGPoint(x: 7.65, y: 8), controlPoint2: CGPoint(x: 1.77, y: 2.55))
        bezier2Path.addCurve(to: CGPoint(x: -8.04, y: 8), controlPoint1: CGPoint(x: -1.77, y: 2.55), controlPoint2: CGPoint(x: -7.65, y: 8))
        bezier2Path.addCurve(to: CGPoint(x: -8.5, y: 7.57), controlPoint1: CGPoint(x: -8.5, y: 8), controlPoint2: CGPoint(x: -8.5, y: 8))
        bezier2Path.addCurve(to: CGPoint(x: -0.88, y: 0), controlPoint1: CGPoint(x: -8.5, y: 7.13), controlPoint2: CGPoint(x: -0.88, y: 0.43))
        bezier2Path.addCurve(to: CGPoint(x: -8.5, y: -7.57), controlPoint1: CGPoint(x: -0.88, y: -0.43), controlPoint2: CGPoint(x: -8.5, y: -7.13))
        bezier2Path.addCurve(to: CGPoint(x: -8.04, y: -8), controlPoint1: CGPoint(x: -8.5, y: -8), controlPoint2: CGPoint(x: -8.5, y: -8))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        PaintCode.light.setFill()
        bezier2Path.fill()

        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawPlusIconComic(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)


        //// Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.move(to: CGPoint(x: 23.75, y: 12))
        clipPath.addCurve(to: CGPoint(x: 12.54, y: 12.45), controlPoint1: CGPoint(x: 23.48, y: 12.28), controlPoint2: CGPoint(x: 15.14, y: 12.55))
        clipPath.addLine(to: CGPoint(x: 12.55, y: 12.98))
        clipPath.addCurve(to: CGPoint(x: 12.1, y: 23.74), controlPoint1: CGPoint(x: 12.6, y: 16), controlPoint2: CGPoint(x: 12.36, y: 23.48))
        clipPath.addLine(to: CGPoint(x: 11.96, y: 23.88))
        clipPath.addCurve(to: CGPoint(x: 11.47, y: 23.76), controlPoint1: CGPoint(x: 11.77, y: 24.06), controlPoint2: CGPoint(x: 11.72, y: 24.01))
        clipPath.addCurve(to: CGPoint(x: 11.47, y: 12.62), controlPoint1: CGPoint(x: 11.16, y: 23.45), controlPoint2: CGPoint(x: 11.78, y: 12.93))
        clipPath.addCurve(to: CGPoint(x: 0.24, y: 12.65), controlPoint1: CGPoint(x: 11.16, y: 12.31), controlPoint2: CGPoint(x: 0.54, y: 12.96))
        clipPath.addCurve(to: CGPoint(x: 0.25, y: 12.02), controlPoint1: CGPoint(x: -0.07, y: 12.34), controlPoint2: CGPoint(x: -0.07, y: 12.34))
        clipPath.addCurve(to: CGPoint(x: 11.64, y: 11.55), controlPoint1: CGPoint(x: 0.53, y: 11.75), controlPoint2: CGPoint(x: 9.04, y: 11.45))
        clipPath.addLine(to: CGPoint(x: 11.63, y: 11.21))
        clipPath.addCurve(to: CGPoint(x: 12.14, y: 0.25), controlPoint1: CGPoint(x: 11.56, y: 8.31), controlPoint2: CGPoint(x: 11.88, y: 0.51))
        clipPath.addLine(to: CGPoint(x: 12.28, y: 0.11))
        clipPath.addCurve(to: CGPoint(x: 12.78, y: 0.23), controlPoint1: CGPoint(x: 12.48, y: -0.07), controlPoint2: CGPoint(x: 12.52, y: -0.02))
        clipPath.addCurve(to: CGPoint(x: 12.71, y: 11.38), controlPoint1: CGPoint(x: 13.08, y: 0.54), controlPoint2: CGPoint(x: 12.4, y: 11.07))
        clipPath.addCurve(to: CGPoint(x: 23.77, y: 11.37), controlPoint1: CGPoint(x: 13.01, y: 11.69), controlPoint2: CGPoint(x: 23.46, y: 11.06))
        clipPath.addLine(to: CGPoint(x: 23.9, y: 11.5))
        clipPath.addCurve(to: CGPoint(x: 23.75, y: 12), controlPoint1: CGPoint(x: 24.07, y: 11.68), controlPoint2: CGPoint(x: 24.02, y: 11.73))
        clipPath.close()
        clipPath.usesEvenOddFillRule = true
        clipPath.addClip()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: -5, y: -5, width: 34, height: 34))
        PaintCode.light.setFill()
        rectanglePath.fill()


        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawEditIconComic(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 23.79, y: 11.71))
        bezierPath.addCurve(to: CGPoint(x: 4.2, y: 12.4), controlPoint1: CGPoint(x: 23.55, y: 11.98), controlPoint2: CGPoint(x: 4.46, y: 12.7))
        bezierPath.addCurve(to: CGPoint(x: 4.21, y: 11.77), controlPoint1: CGPoint(x: 3.93, y: 12.09), controlPoint2: CGPoint(x: 3.93, y: 12.09))
        bezierPath.addCurve(to: CGPoint(x: 23.8, y: 11.07), controlPoint1: CGPoint(x: 4.45, y: 11.49), controlPoint2: CGPoint(x: 23.54, y: 10.77))
        bezierPath.addLine(to: CGPoint(x: 23.91, y: 11.21))
        bezierPath.addCurve(to: CGPoint(x: 23.79, y: 11.71), controlPoint1: CGPoint(x: 24.06, y: 11.39), controlPoint2: CGPoint(x: 24.02, y: 11.44))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        PaintCode.light.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 23.79, y: 19.71))
        bezier2Path.addCurve(to: CGPoint(x: 4.2, y: 20.4), controlPoint1: CGPoint(x: 23.55, y: 19.98), controlPoint2: CGPoint(x: 4.46, y: 20.7))
        bezier2Path.addCurve(to: CGPoint(x: 4.21, y: 19.77), controlPoint1: CGPoint(x: 3.93, y: 20.09), controlPoint2: CGPoint(x: 3.93, y: 20.09))
        bezier2Path.addCurve(to: CGPoint(x: 23.8, y: 19.07), controlPoint1: CGPoint(x: 4.45, y: 19.49), controlPoint2: CGPoint(x: 23.54, y: 18.77))
        bezier2Path.addLine(to: CGPoint(x: 23.91, y: 19.21))
        bezier2Path.addCurve(to: CGPoint(x: 23.79, y: 19.71), controlPoint1: CGPoint(x: 24.06, y: 19.39), controlPoint2: CGPoint(x: 24.02, y: 19.44))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        PaintCode.light.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 23.79, y: 3.71))
        bezier3Path.addCurve(to: CGPoint(x: 4.2, y: 4.4), controlPoint1: CGPoint(x: 23.55, y: 3.98), controlPoint2: CGPoint(x: 4.46, y: 4.7))
        bezier3Path.addCurve(to: CGPoint(x: 4.21, y: 3.77), controlPoint1: CGPoint(x: 3.93, y: 4.09), controlPoint2: CGPoint(x: 3.93, y: 4.09))
        bezier3Path.addCurve(to: CGPoint(x: 23.8, y: 3.07), controlPoint1: CGPoint(x: 4.45, y: 3.49), controlPoint2: CGPoint(x: 23.54, y: 2.77))
        bezier3Path.addLine(to: CGPoint(x: 23.91, y: 3.21))
        bezier3Path.addCurve(to: CGPoint(x: 23.79, y: 3.71), controlPoint1: CGPoint(x: 24.06, y: 3.39), controlPoint2: CGPoint(x: 24.02, y: 3.44))
        bezier3Path.close()
        bezier3Path.usesEvenOddFillRule = true
        PaintCode.light.setFill()
        bezier3Path.fill()


        //// Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.move(to: CGPoint(x: 1.83, y: 4.59))
        clipPath.addCurve(to: CGPoint(x: 0.2, y: 4.59), controlPoint1: CGPoint(x: 1.59, y: 5.11), controlPoint2: CGPoint(x: 0.46, y: 5.17))
        clipPath.addCurve(to: CGPoint(x: 0.21, y: 3.41), controlPoint1: CGPoint(x: -0.07, y: 4.02), controlPoint2: CGPoint(x: -0.07, y: 4.02))
        clipPath.addCurve(to: CGPoint(x: 1.85, y: 3.41), controlPoint1: CGPoint(x: 0.45, y: 2.89), controlPoint2: CGPoint(x: 1.58, y: 2.83))
        clipPath.addLine(to: CGPoint(x: 1.96, y: 3.65))
        clipPath.addCurve(to: CGPoint(x: 1.83, y: 4.59), controlPoint1: CGPoint(x: 2.1, y: 4), controlPoint2: CGPoint(x: 2.07, y: 4.09))
        clipPath.close()
        clipPath.usesEvenOddFillRule = true
        clipPath.addClip()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: -5.03, y: -2, width: 12.05, height: 12))
        PaintCode.light.setFill()
        rectanglePath.fill()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 2
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip 2
        let clip2Path = UIBezierPath()
        clip2Path.move(to: CGPoint(x: 1.83, y: 12.59))
        clip2Path.addCurve(to: CGPoint(x: 0.2, y: 12.59), controlPoint1: CGPoint(x: 1.59, y: 13.11), controlPoint2: CGPoint(x: 0.46, y: 13.17))
        clip2Path.addCurve(to: CGPoint(x: 0.21, y: 11.41), controlPoint1: CGPoint(x: -0.07, y: 12.02), controlPoint2: CGPoint(x: -0.07, y: 12.02))
        clip2Path.addCurve(to: CGPoint(x: 1.85, y: 11.41), controlPoint1: CGPoint(x: 0.45, y: 10.89), controlPoint2: CGPoint(x: 1.58, y: 10.83))
        clip2Path.addLine(to: CGPoint(x: 1.96, y: 11.65))
        clip2Path.addCurve(to: CGPoint(x: 1.83, y: 12.59), controlPoint1: CGPoint(x: 2.1, y: 12), controlPoint2: CGPoint(x: 2.07, y: 12.09))
        clip2Path.close()
        clip2Path.usesEvenOddFillRule = true
        clip2Path.addClip()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: -5.03, y: 6, width: 12.05, height: 12))
        PaintCode.light.setFill()
        rectangle2Path.fill()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 3
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip 3
        let clip3Path = UIBezierPath()
        clip3Path.move(to: CGPoint(x: 1.83, y: 20.59))
        clip3Path.addCurve(to: CGPoint(x: 0.2, y: 20.59), controlPoint1: CGPoint(x: 1.59, y: 21.11), controlPoint2: CGPoint(x: 0.46, y: 21.17))
        clip3Path.addCurve(to: CGPoint(x: 0.21, y: 19.41), controlPoint1: CGPoint(x: -0.07, y: 20.02), controlPoint2: CGPoint(x: -0.07, y: 20.02))
        clip3Path.addCurve(to: CGPoint(x: 1.85, y: 19.41), controlPoint1: CGPoint(x: 0.45, y: 18.89), controlPoint2: CGPoint(x: 1.58, y: 18.83))
        clip3Path.addLine(to: CGPoint(x: 1.96, y: 19.65))
        clip3Path.addCurve(to: CGPoint(x: 1.83, y: 20.59), controlPoint1: CGPoint(x: 2.1, y: 20), controlPoint2: CGPoint(x: 2.07, y: 20.09))
        clip3Path.close()
        clip3Path.usesEvenOddFillRule = true
        clip3Path.addClip()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: -5.03, y: 14, width: 12.05, height: 12))
        PaintCode.light.setFill()
        rectangle3Path.fill()


        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawPlusIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)


        //// Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.move(to: CGPoint(x: 23.74, y: 12.33))
        clipPath.addCurve(to: CGPoint(x: 12.54, y: 12.45), controlPoint1: CGPoint(x: 23.46, y: 12.6), controlPoint2: CGPoint(x: 15.14, y: 12.55))
        clipPath.addLine(to: CGPoint(x: 12.55, y: 12.98))
        clipPath.addCurve(to: CGPoint(x: 12.32, y: 23.74), controlPoint1: CGPoint(x: 12.6, y: 16), controlPoint2: CGPoint(x: 12.58, y: 23.48))
        clipPath.addLine(to: CGPoint(x: 12.18, y: 23.88))
        clipPath.addCurve(to: CGPoint(x: 11.69, y: 23.76), controlPoint1: CGPoint(x: 11.99, y: 24.06), controlPoint2: CGPoint(x: 11.95, y: 24.01))
        clipPath.addCurve(to: CGPoint(x: 11.47, y: 12.62), controlPoint1: CGPoint(x: 11.38, y: 23.45), controlPoint2: CGPoint(x: 11.78, y: 12.93))
        clipPath.addCurve(to: CGPoint(x: 0.24, y: 12.31), controlPoint1: CGPoint(x: 11.16, y: 12.31), controlPoint2: CGPoint(x: 0.55, y: 12.62))
        clipPath.addCurve(to: CGPoint(x: 0.26, y: 11.68), controlPoint1: CGPoint(x: -0.07, y: 12.01), controlPoint2: CGPoint(x: -0.07, y: 12.01))
        clipPath.addCurve(to: CGPoint(x: 11.64, y: 11.55), controlPoint1: CGPoint(x: 0.53, y: 11.41), controlPoint2: CGPoint(x: 9.04, y: 11.45))
        clipPath.addLine(to: CGPoint(x: 11.63, y: 11.21))
        clipPath.addCurve(to: CGPoint(x: 11.69, y: 0.25), controlPoint1: CGPoint(x: 11.56, y: 8.31), controlPoint2: CGPoint(x: 11.43, y: 0.51))
        clipPath.addLine(to: CGPoint(x: 11.83, y: 0.12))
        clipPath.addCurve(to: CGPoint(x: 12.32, y: 0.23), controlPoint1: CGPoint(x: 12.02, y: -0.06), controlPoint2: CGPoint(x: 12.07, y: -0.02))
        clipPath.addCurve(to: CGPoint(x: 12.71, y: 11.38), controlPoint1: CGPoint(x: 12.63, y: 0.54), controlPoint2: CGPoint(x: 12.4, y: 11.07))
        clipPath.addCurve(to: CGPoint(x: 23.76, y: 11.69), controlPoint1: CGPoint(x: 13.01, y: 11.69), controlPoint2: CGPoint(x: 23.45, y: 11.39))
        clipPath.addLine(to: CGPoint(x: 23.88, y: 11.83))
        clipPath.addCurve(to: CGPoint(x: 23.74, y: 12.33), controlPoint1: CGPoint(x: 24.05, y: 12.01), controlPoint2: CGPoint(x: 24.01, y: 12.06))
        clipPath.close()
        clipPath.usesEvenOddFillRule = true
        clipPath.addClip()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: -4.98, y: -5, width: 33.95, height: 34))
        PaintCode.light.setFill()
        rectanglePath.fill()


        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawEditIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 23.75, y: 4.33))
        bezierPath.addCurve(to: CGPoint(x: 4.2, y: 4.33), controlPoint1: CGPoint(x: 23.51, y: 4.6), controlPoint2: CGPoint(x: 4.46, y: 4.63))
        bezierPath.addCurve(to: CGPoint(x: 4.21, y: 3.69), controlPoint1: CGPoint(x: 3.93, y: 4.02), controlPoint2: CGPoint(x: 3.93, y: 4.02))
        bezierPath.addCurve(to: CGPoint(x: 23.76, y: 3.69), controlPoint1: CGPoint(x: 4.45, y: 3.42), controlPoint2: CGPoint(x: 23.5, y: 3.39))
        bezierPath.addLine(to: CGPoint(x: 23.87, y: 3.82))
        bezierPath.addCurve(to: CGPoint(x: 23.75, y: 4.33), controlPoint1: CGPoint(x: 24.02, y: 4.01), controlPoint2: CGPoint(x: 23.98, y: 4.05))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        PaintCode.light.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 23.75, y: 12.35))
        bezier2Path.addCurve(to: CGPoint(x: 4.2, y: 12.35), controlPoint1: CGPoint(x: 23.51, y: 12.63), controlPoint2: CGPoint(x: 4.46, y: 12.66))
        bezier2Path.addCurve(to: CGPoint(x: 4.21, y: 11.72), controlPoint1: CGPoint(x: 3.93, y: 12.04), controlPoint2: CGPoint(x: 3.93, y: 12.04))
        bezier2Path.addCurve(to: CGPoint(x: 23.76, y: 11.72), controlPoint1: CGPoint(x: 4.45, y: 11.44), controlPoint2: CGPoint(x: 23.5, y: 11.41))
        bezier2Path.addLine(to: CGPoint(x: 23.87, y: 11.85))
        bezier2Path.addCurve(to: CGPoint(x: 23.75, y: 12.35), controlPoint1: CGPoint(x: 24.02, y: 12.04), controlPoint2: CGPoint(x: 23.98, y: 12.08))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        PaintCode.light.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 23.75, y: 20.35))
        bezier3Path.addCurve(to: CGPoint(x: 4.2, y: 20.35), controlPoint1: CGPoint(x: 23.51, y: 20.63), controlPoint2: CGPoint(x: 4.46, y: 20.66))
        bezier3Path.addCurve(to: CGPoint(x: 4.21, y: 19.72), controlPoint1: CGPoint(x: 3.93, y: 20.04), controlPoint2: CGPoint(x: 3.93, y: 20.04))
        bezier3Path.addCurve(to: CGPoint(x: 23.76, y: 19.72), controlPoint1: CGPoint(x: 4.45, y: 19.44), controlPoint2: CGPoint(x: 23.5, y: 19.41))
        bezier3Path.addLine(to: CGPoint(x: 23.87, y: 19.85))
        bezier3Path.addCurve(to: CGPoint(x: 23.75, y: 20.35), controlPoint1: CGPoint(x: 24.02, y: 20.04), controlPoint2: CGPoint(x: 23.98, y: 20.08))
        bezier3Path.close()
        bezier3Path.usesEvenOddFillRule = true
        PaintCode.light.setFill()
        bezier3Path.fill()


        //// Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.move(to: CGPoint(x: 1.83, y: 4.59))
        clipPath.addCurve(to: CGPoint(x: 0.2, y: 4.59), controlPoint1: CGPoint(x: 1.59, y: 5.11), controlPoint2: CGPoint(x: 0.46, y: 5.17))
        clipPath.addCurve(to: CGPoint(x: 0.21, y: 3.41), controlPoint1: CGPoint(x: -0.07, y: 4.02), controlPoint2: CGPoint(x: -0.07, y: 4.02))
        clipPath.addCurve(to: CGPoint(x: 1.85, y: 3.41), controlPoint1: CGPoint(x: 0.45, y: 2.89), controlPoint2: CGPoint(x: 1.58, y: 2.83))
        clipPath.addLine(to: CGPoint(x: 1.96, y: 3.65))
        clipPath.addCurve(to: CGPoint(x: 1.83, y: 4.59), controlPoint1: CGPoint(x: 2.1, y: 4), controlPoint2: CGPoint(x: 2.07, y: 4.09))
        clipPath.close()
        clipPath.usesEvenOddFillRule = true
        clipPath.addClip()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: -5.03, y: -2, width: 12.05, height: 12))
        PaintCode.light.setFill()
        rectanglePath.fill()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 2
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip 2
        let clip2Path = UIBezierPath()
        clip2Path.move(to: CGPoint(x: 1.83, y: 12.59))
        clip2Path.addCurve(to: CGPoint(x: 0.2, y: 12.59), controlPoint1: CGPoint(x: 1.59, y: 13.11), controlPoint2: CGPoint(x: 0.46, y: 13.17))
        clip2Path.addCurve(to: CGPoint(x: 0.21, y: 11.41), controlPoint1: CGPoint(x: -0.07, y: 12.02), controlPoint2: CGPoint(x: -0.07, y: 12.02))
        clip2Path.addCurve(to: CGPoint(x: 1.85, y: 11.41), controlPoint1: CGPoint(x: 0.45, y: 10.89), controlPoint2: CGPoint(x: 1.58, y: 10.83))
        clip2Path.addLine(to: CGPoint(x: 1.96, y: 11.65))
        clip2Path.addCurve(to: CGPoint(x: 1.83, y: 12.59), controlPoint1: CGPoint(x: 2.1, y: 12), controlPoint2: CGPoint(x: 2.07, y: 12.09))
        clip2Path.close()
        clip2Path.usesEvenOddFillRule = true
        clip2Path.addClip()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: -5.03, y: 6, width: 12.05, height: 12))
        PaintCode.light.setFill()
        rectangle2Path.fill()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 3
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip 3
        let clip3Path = UIBezierPath()
        clip3Path.move(to: CGPoint(x: 1.83, y: 20.59))
        clip3Path.addCurve(to: CGPoint(x: 0.2, y: 20.59), controlPoint1: CGPoint(x: 1.59, y: 21.11), controlPoint2: CGPoint(x: 0.46, y: 21.17))
        clip3Path.addCurve(to: CGPoint(x: 0.21, y: 19.41), controlPoint1: CGPoint(x: -0.07, y: 20.02), controlPoint2: CGPoint(x: -0.07, y: 20.02))
        clip3Path.addCurve(to: CGPoint(x: 1.85, y: 19.41), controlPoint1: CGPoint(x: 0.45, y: 18.89), controlPoint2: CGPoint(x: 1.58, y: 18.83))
        clip3Path.addLine(to: CGPoint(x: 1.96, y: 19.65))
        clip3Path.addCurve(to: CGPoint(x: 1.83, y: 20.59), controlPoint1: CGPoint(x: 2.1, y: 20), controlPoint2: CGPoint(x: 2.07, y: 20.09))
        clip3Path.close()
        clip3Path.usesEvenOddFillRule = true
        clip3Path.addClip()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: -5.03, y: 14, width: 12.05, height: 12))
        PaintCode.light.setFill()
        rectangle3Path.fill()


        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawEditIconActive(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 23.75, y: 4.33))
        bezierPath.addCurve(to: CGPoint(x: 4.2, y: 4.33), controlPoint1: CGPoint(x: 23.51, y: 4.6), controlPoint2: CGPoint(x: 4.46, y: 4.63))
        bezierPath.addCurve(to: CGPoint(x: 4.21, y: 3.69), controlPoint1: CGPoint(x: 3.93, y: 4.02), controlPoint2: CGPoint(x: 3.93, y: 4.02))
        bezierPath.addCurve(to: CGPoint(x: 23.76, y: 3.69), controlPoint1: CGPoint(x: 4.45, y: 3.42), controlPoint2: CGPoint(x: 23.5, y: 3.39))
        bezierPath.addLine(to: CGPoint(x: 23.87, y: 3.82))
        bezierPath.addCurve(to: CGPoint(x: 23.75, y: 4.33), controlPoint1: CGPoint(x: 24.02, y: 4.01), controlPoint2: CGPoint(x: 23.98, y: 4.05))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        PaintCode.highlight.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 23.75, y: 12.35))
        bezier2Path.addCurve(to: CGPoint(x: 4.2, y: 12.35), controlPoint1: CGPoint(x: 23.51, y: 12.63), controlPoint2: CGPoint(x: 4.46, y: 12.66))
        bezier2Path.addCurve(to: CGPoint(x: 4.21, y: 11.72), controlPoint1: CGPoint(x: 3.93, y: 12.04), controlPoint2: CGPoint(x: 3.93, y: 12.04))
        bezier2Path.addCurve(to: CGPoint(x: 23.76, y: 11.72), controlPoint1: CGPoint(x: 4.45, y: 11.44), controlPoint2: CGPoint(x: 23.5, y: 11.41))
        bezier2Path.addLine(to: CGPoint(x: 23.87, y: 11.85))
        bezier2Path.addCurve(to: CGPoint(x: 23.75, y: 12.35), controlPoint1: CGPoint(x: 24.02, y: 12.04), controlPoint2: CGPoint(x: 23.98, y: 12.08))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        PaintCode.highlight.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 23.75, y: 20.35))
        bezier3Path.addCurve(to: CGPoint(x: 4.2, y: 20.35), controlPoint1: CGPoint(x: 23.51, y: 20.63), controlPoint2: CGPoint(x: 4.46, y: 20.66))
        bezier3Path.addCurve(to: CGPoint(x: 4.21, y: 19.72), controlPoint1: CGPoint(x: 3.93, y: 20.04), controlPoint2: CGPoint(x: 3.93, y: 20.04))
        bezier3Path.addCurve(to: CGPoint(x: 23.76, y: 19.72), controlPoint1: CGPoint(x: 4.45, y: 19.44), controlPoint2: CGPoint(x: 23.5, y: 19.41))
        bezier3Path.addLine(to: CGPoint(x: 23.87, y: 19.85))
        bezier3Path.addCurve(to: CGPoint(x: 23.75, y: 20.35), controlPoint1: CGPoint(x: 24.02, y: 20.04), controlPoint2: CGPoint(x: 23.98, y: 20.08))
        bezier3Path.close()
        bezier3Path.usesEvenOddFillRule = true
        PaintCode.highlight.setFill()
        bezier3Path.fill()


        //// Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.move(to: CGPoint(x: 1.83, y: 4.59))
        clipPath.addCurve(to: CGPoint(x: 0.2, y: 4.59), controlPoint1: CGPoint(x: 1.59, y: 5.11), controlPoint2: CGPoint(x: 0.46, y: 5.17))
        clipPath.addCurve(to: CGPoint(x: 0.21, y: 3.41), controlPoint1: CGPoint(x: -0.07, y: 4.02), controlPoint2: CGPoint(x: -0.07, y: 4.02))
        clipPath.addCurve(to: CGPoint(x: 1.85, y: 3.41), controlPoint1: CGPoint(x: 0.45, y: 2.89), controlPoint2: CGPoint(x: 1.58, y: 2.83))
        clipPath.addLine(to: CGPoint(x: 1.96, y: 3.65))
        clipPath.addCurve(to: CGPoint(x: 1.83, y: 4.59), controlPoint1: CGPoint(x: 2.1, y: 4), controlPoint2: CGPoint(x: 2.07, y: 4.09))
        clipPath.close()
        clipPath.usesEvenOddFillRule = true
        clipPath.addClip()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: -5.03, y: -2, width: 12.05, height: 12))
        PaintCode.highlight.setFill()
        rectanglePath.fill()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 2
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip 2
        let clip2Path = UIBezierPath()
        clip2Path.move(to: CGPoint(x: 1.83, y: 12.59))
        clip2Path.addCurve(to: CGPoint(x: 0.2, y: 12.59), controlPoint1: CGPoint(x: 1.59, y: 13.11), controlPoint2: CGPoint(x: 0.46, y: 13.17))
        clip2Path.addCurve(to: CGPoint(x: 0.21, y: 11.41), controlPoint1: CGPoint(x: -0.07, y: 12.02), controlPoint2: CGPoint(x: -0.07, y: 12.02))
        clip2Path.addCurve(to: CGPoint(x: 1.85, y: 11.41), controlPoint1: CGPoint(x: 0.45, y: 10.89), controlPoint2: CGPoint(x: 1.58, y: 10.83))
        clip2Path.addLine(to: CGPoint(x: 1.96, y: 11.65))
        clip2Path.addCurve(to: CGPoint(x: 1.83, y: 12.59), controlPoint1: CGPoint(x: 2.1, y: 12), controlPoint2: CGPoint(x: 2.07, y: 12.09))
        clip2Path.close()
        clip2Path.usesEvenOddFillRule = true
        clip2Path.addClip()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: -5.03, y: 6, width: 12.05, height: 12))
        PaintCode.highlight.setFill()
        rectangle2Path.fill()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 3
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip 3
        let clip3Path = UIBezierPath()
        clip3Path.move(to: CGPoint(x: 1.83, y: 20.59))
        clip3Path.addCurve(to: CGPoint(x: 0.2, y: 20.59), controlPoint1: CGPoint(x: 1.59, y: 21.11), controlPoint2: CGPoint(x: 0.46, y: 21.17))
        clip3Path.addCurve(to: CGPoint(x: 0.21, y: 19.41), controlPoint1: CGPoint(x: -0.07, y: 20.02), controlPoint2: CGPoint(x: -0.07, y: 20.02))
        clip3Path.addCurve(to: CGPoint(x: 1.85, y: 19.41), controlPoint1: CGPoint(x: 0.45, y: 18.89), controlPoint2: CGPoint(x: 1.58, y: 18.83))
        clip3Path.addLine(to: CGPoint(x: 1.96, y: 19.65))
        clip3Path.addCurve(to: CGPoint(x: 1.83, y: 20.59), controlPoint1: CGPoint(x: 2.1, y: 20), controlPoint2: CGPoint(x: 2.07, y: 20.09))
        clip3Path.close()
        clip3Path.usesEvenOddFillRule = true
        clip3Path.addClip()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: -5.03, y: 14, width: 12.05, height: 12))
        PaintCode.highlight.setFill()
        rectangle3Path.fill()


        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawPlusIconActive(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)


        //// Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.move(to: CGPoint(x: 23.74, y: 12.33))
        clipPath.addCurve(to: CGPoint(x: 12.54, y: 12.45), controlPoint1: CGPoint(x: 23.46, y: 12.6), controlPoint2: CGPoint(x: 15.14, y: 12.55))
        clipPath.addLine(to: CGPoint(x: 12.55, y: 12.98))
        clipPath.addCurve(to: CGPoint(x: 12.32, y: 23.74), controlPoint1: CGPoint(x: 12.6, y: 16), controlPoint2: CGPoint(x: 12.58, y: 23.48))
        clipPath.addLine(to: CGPoint(x: 12.18, y: 23.88))
        clipPath.addCurve(to: CGPoint(x: 11.69, y: 23.76), controlPoint1: CGPoint(x: 11.99, y: 24.06), controlPoint2: CGPoint(x: 11.95, y: 24.01))
        clipPath.addCurve(to: CGPoint(x: 11.47, y: 12.62), controlPoint1: CGPoint(x: 11.38, y: 23.45), controlPoint2: CGPoint(x: 11.78, y: 12.93))
        clipPath.addCurve(to: CGPoint(x: 0.24, y: 12.31), controlPoint1: CGPoint(x: 11.16, y: 12.31), controlPoint2: CGPoint(x: 0.55, y: 12.62))
        clipPath.addCurve(to: CGPoint(x: 0.26, y: 11.68), controlPoint1: CGPoint(x: -0.07, y: 12.01), controlPoint2: CGPoint(x: -0.07, y: 12.01))
        clipPath.addCurve(to: CGPoint(x: 11.64, y: 11.55), controlPoint1: CGPoint(x: 0.53, y: 11.41), controlPoint2: CGPoint(x: 9.04, y: 11.45))
        clipPath.addLine(to: CGPoint(x: 11.63, y: 11.21))
        clipPath.addCurve(to: CGPoint(x: 11.69, y: 0.25), controlPoint1: CGPoint(x: 11.56, y: 8.31), controlPoint2: CGPoint(x: 11.43, y: 0.51))
        clipPath.addLine(to: CGPoint(x: 11.83, y: 0.12))
        clipPath.addCurve(to: CGPoint(x: 12.32, y: 0.23), controlPoint1: CGPoint(x: 12.02, y: -0.06), controlPoint2: CGPoint(x: 12.07, y: -0.02))
        clipPath.addCurve(to: CGPoint(x: 12.71, y: 11.38), controlPoint1: CGPoint(x: 12.63, y: 0.54), controlPoint2: CGPoint(x: 12.4, y: 11.07))
        clipPath.addCurve(to: CGPoint(x: 23.76, y: 11.69), controlPoint1: CGPoint(x: 13.01, y: 11.69), controlPoint2: CGPoint(x: 23.45, y: 11.39))
        clipPath.addLine(to: CGPoint(x: 23.88, y: 11.83))
        clipPath.addCurve(to: CGPoint(x: 23.74, y: 12.33), controlPoint1: CGPoint(x: 24.05, y: 12.01), controlPoint2: CGPoint(x: 24.01, y: 12.06))
        clipPath.close()
        clipPath.usesEvenOddFillRule = true
        clipPath.addClip()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: -4.98, y: -5, width: 33.95, height: 34))
        PaintCode.highlight.setFill()
        rectanglePath.fill()


        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawEditIconSpread(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 23.75, y: 1.33))
        bezierPath.addCurve(to: CGPoint(x: 4.2, y: 1.33), controlPoint1: CGPoint(x: 23.51, y: 1.6), controlPoint2: CGPoint(x: 4.46, y: 1.63))
        bezierPath.addCurve(to: CGPoint(x: 4.21, y: 0.69), controlPoint1: CGPoint(x: 3.93, y: 1.02), controlPoint2: CGPoint(x: 3.93, y: 1.02))
        bezierPath.addCurve(to: CGPoint(x: 23.76, y: 0.69), controlPoint1: CGPoint(x: 4.45, y: 0.42), controlPoint2: CGPoint(x: 23.5, y: 0.39))
        bezierPath.addLine(to: CGPoint(x: 23.87, y: 0.82))
        bezierPath.addCurve(to: CGPoint(x: 23.75, y: 1.33), controlPoint1: CGPoint(x: 24.02, y: 1.01), controlPoint2: CGPoint(x: 23.98, y: 1.05))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        PaintCode.light.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 23.75, y: 12.35))
        bezier2Path.addCurve(to: CGPoint(x: 4.2, y: 12.35), controlPoint1: CGPoint(x: 23.51, y: 12.63), controlPoint2: CGPoint(x: 4.46, y: 12.66))
        bezier2Path.addCurve(to: CGPoint(x: 4.21, y: 11.72), controlPoint1: CGPoint(x: 3.93, y: 12.04), controlPoint2: CGPoint(x: 3.93, y: 12.04))
        bezier2Path.addCurve(to: CGPoint(x: 23.76, y: 11.72), controlPoint1: CGPoint(x: 4.45, y: 11.44), controlPoint2: CGPoint(x: 23.5, y: 11.41))
        bezier2Path.addLine(to: CGPoint(x: 23.87, y: 11.85))
        bezier2Path.addCurve(to: CGPoint(x: 23.75, y: 12.35), controlPoint1: CGPoint(x: 24.02, y: 12.04), controlPoint2: CGPoint(x: 23.98, y: 12.08))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        PaintCode.light.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 23.75, y: 23.35))
        bezier3Path.addCurve(to: CGPoint(x: 4.2, y: 23.35), controlPoint1: CGPoint(x: 23.51, y: 23.63), controlPoint2: CGPoint(x: 4.46, y: 23.66))
        bezier3Path.addCurve(to: CGPoint(x: 4.21, y: 22.72), controlPoint1: CGPoint(x: 3.93, y: 23.04), controlPoint2: CGPoint(x: 3.93, y: 23.04))
        bezier3Path.addCurve(to: CGPoint(x: 23.76, y: 22.72), controlPoint1: CGPoint(x: 4.45, y: 22.44), controlPoint2: CGPoint(x: 23.5, y: 22.41))
        bezier3Path.addLine(to: CGPoint(x: 23.87, y: 22.85))
        bezier3Path.addCurve(to: CGPoint(x: 23.75, y: 23.35), controlPoint1: CGPoint(x: 24.02, y: 23.04), controlPoint2: CGPoint(x: 23.98, y: 23.08))
        bezier3Path.close()
        bezier3Path.usesEvenOddFillRule = true
        PaintCode.light.setFill()
        bezier3Path.fill()


        //// Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.move(to: CGPoint(x: 1.83, y: 1.59))
        clipPath.addCurve(to: CGPoint(x: 0.2, y: 1.59), controlPoint1: CGPoint(x: 1.59, y: 2.11), controlPoint2: CGPoint(x: 0.46, y: 2.17))
        clipPath.addCurve(to: CGPoint(x: 0.21, y: 0.41), controlPoint1: CGPoint(x: -0.07, y: 1.02), controlPoint2: CGPoint(x: -0.07, y: 1.02))
        clipPath.addCurve(to: CGPoint(x: 1.85, y: 0.41), controlPoint1: CGPoint(x: 0.45, y: -0.11), controlPoint2: CGPoint(x: 1.58, y: -0.17))
        clipPath.addLine(to: CGPoint(x: 1.96, y: 0.65))
        clipPath.addCurve(to: CGPoint(x: 1.83, y: 1.59), controlPoint1: CGPoint(x: 2.1, y: 1), controlPoint2: CGPoint(x: 2.07, y: 1.09))
        clipPath.close()
        clipPath.usesEvenOddFillRule = true
        clipPath.addClip()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: -5.03, y: -5, width: 12.05, height: 12))
        PaintCode.light.setFill()
        rectanglePath.fill()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 2
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip 2
        let clip2Path = UIBezierPath()
        clip2Path.move(to: CGPoint(x: 1.83, y: 12.59))
        clip2Path.addCurve(to: CGPoint(x: 0.2, y: 12.59), controlPoint1: CGPoint(x: 1.59, y: 13.11), controlPoint2: CGPoint(x: 0.46, y: 13.17))
        clip2Path.addCurve(to: CGPoint(x: 0.21, y: 11.41), controlPoint1: CGPoint(x: -0.07, y: 12.02), controlPoint2: CGPoint(x: -0.07, y: 12.02))
        clip2Path.addCurve(to: CGPoint(x: 1.85, y: 11.41), controlPoint1: CGPoint(x: 0.45, y: 10.89), controlPoint2: CGPoint(x: 1.58, y: 10.83))
        clip2Path.addLine(to: CGPoint(x: 1.96, y: 11.65))
        clip2Path.addCurve(to: CGPoint(x: 1.83, y: 12.59), controlPoint1: CGPoint(x: 2.1, y: 12), controlPoint2: CGPoint(x: 2.07, y: 12.09))
        clip2Path.close()
        clip2Path.usesEvenOddFillRule = true
        clip2Path.addClip()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: -5.03, y: 6, width: 12.05, height: 12))
        PaintCode.light.setFill()
        rectangle2Path.fill()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 3
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip 3
        let clip3Path = UIBezierPath()
        clip3Path.move(to: CGPoint(x: 1.83, y: 23.59))
        clip3Path.addCurve(to: CGPoint(x: 0.2, y: 23.59), controlPoint1: CGPoint(x: 1.59, y: 24.11), controlPoint2: CGPoint(x: 0.46, y: 24.17))
        clip3Path.addCurve(to: CGPoint(x: 0.21, y: 22.41), controlPoint1: CGPoint(x: -0.07, y: 23.02), controlPoint2: CGPoint(x: -0.07, y: 23.02))
        clip3Path.addCurve(to: CGPoint(x: 1.85, y: 22.41), controlPoint1: CGPoint(x: 0.45, y: 21.89), controlPoint2: CGPoint(x: 1.58, y: 21.83))
        clip3Path.addLine(to: CGPoint(x: 1.96, y: 22.65))
        clip3Path.addCurve(to: CGPoint(x: 1.83, y: 23.59), controlPoint1: CGPoint(x: 2.1, y: 23), controlPoint2: CGPoint(x: 2.07, y: 23.09))
        clip3Path.close()
        clip3Path.usesEvenOddFillRule = true
        clip3Path.addClip()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: -5.03, y: 17, width: 12.05, height: 12))
        PaintCode.light.setFill()
        rectangle3Path.fill()


        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawAddButtonSmall(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)


        //// Bezier Drawing
        context.saveGState()
        context.scaleBy(x: 0.54, y: 0.54)

        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 22, y: 44))
        bezierPath.addCurve(to: CGPoint(x: 44, y: 22), controlPoint1: CGPoint(x: 34.15, y: 44), controlPoint2: CGPoint(x: 44, y: 34.15))
        bezierPath.addCurve(to: CGPoint(x: 22, y: 0), controlPoint1: CGPoint(x: 44, y: 9.85), controlPoint2: CGPoint(x: 34.15, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 22), controlPoint1: CGPoint(x: 9.85, y: 0), controlPoint2: CGPoint(x: 0, y: 9.85))
        bezierPath.addCurve(to: CGPoint(x: 22, y: 44), controlPoint1: CGPoint(x: 0, y: 34.15), controlPoint2: CGPoint(x: 9.85, y: 44))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        PaintCode.mediumDark.setFill()
        bezierPath.fill()

        context.restoreGState()


        //// Bezier 2 Drawing
        context.saveGState()
        context.translateBy(x: 11.88, y: 11.88)
        context.rotate(by: -45 * CGFloat.pi/180)
        context.scaleBy(x: 0.54, y: 0.54)

        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: -8.04, y: -8))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: -0.63), controlPoint1: CGPoint(x: -7.65, y: -8), controlPoint2: CGPoint(x: -1.77, y: -2.55))
        bezier2Path.addCurve(to: CGPoint(x: 8.04, y: -8), controlPoint1: CGPoint(x: 1.77, y: -2.55), controlPoint2: CGPoint(x: 7.65, y: -8))
        bezier2Path.addCurve(to: CGPoint(x: 8.5, y: -7.57), controlPoint1: CGPoint(x: 8.5, y: -8), controlPoint2: CGPoint(x: 8.5, y: -8))
        bezier2Path.addCurve(to: CGPoint(x: 0.88, y: 0), controlPoint1: CGPoint(x: 8.5, y: -7.13), controlPoint2: CGPoint(x: 0.88, y: -0.43))
        bezier2Path.addCurve(to: CGPoint(x: 8.5, y: 7.57), controlPoint1: CGPoint(x: 0.88, y: 0.43), controlPoint2: CGPoint(x: 8.5, y: 7.13))
        bezier2Path.addCurve(to: CGPoint(x: 8.04, y: 8), controlPoint1: CGPoint(x: 8.5, y: 8), controlPoint2: CGPoint(x: 8.5, y: 8))
        bezier2Path.addCurve(to: CGPoint(x: -0, y: 0.63), controlPoint1: CGPoint(x: 7.65, y: 8), controlPoint2: CGPoint(x: 1.77, y: 2.55))
        bezier2Path.addCurve(to: CGPoint(x: -8.04, y: 8), controlPoint1: CGPoint(x: -1.77, y: 2.55), controlPoint2: CGPoint(x: -7.65, y: 8))
        bezier2Path.addCurve(to: CGPoint(x: -8.5, y: 7.57), controlPoint1: CGPoint(x: -8.5, y: 8), controlPoint2: CGPoint(x: -8.5, y: 8))
        bezier2Path.addCurve(to: CGPoint(x: -0.88, y: 0), controlPoint1: CGPoint(x: -8.5, y: 7.13), controlPoint2: CGPoint(x: -0.88, y: 0.43))
        bezier2Path.addCurve(to: CGPoint(x: -8.5, y: -7.57), controlPoint1: CGPoint(x: -0.88, y: -0.43), controlPoint2: CGPoint(x: -8.5, y: -7.13))
        bezier2Path.addCurve(to: CGPoint(x: -8.04, y: -8), controlPoint1: CGPoint(x: -8.5, y: -8), controlPoint2: CGPoint(x: -8.5, y: -8))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        PaintCode.light.setFill()
        bezier2Path.fill()

        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawEditSongButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 44, height: 44), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 44, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 44, y: resizedFrame.height / 44)


        //// Color Declarations
        let fillColor = UIColor(red: 0.000, green: 0.063, blue: 0.122, alpha: 1.000)
        let fillColor2 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 22, y: 44))
        bezierPath.addCurve(to: CGPoint(x: 44, y: 22), controlPoint1: CGPoint(x: 34.15, y: 44), controlPoint2: CGPoint(x: 44, y: 34.15))
        bezierPath.addCurve(to: CGPoint(x: 22, y: 0), controlPoint1: CGPoint(x: 44, y: 9.85), controlPoint2: CGPoint(x: 34.15, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 22), controlPoint1: CGPoint(x: 9.85, y: 0), controlPoint2: CGPoint(x: 0, y: 9.85))
        bezierPath.addCurve(to: CGPoint(x: 22, y: 44), controlPoint1: CGPoint(x: 0, y: 34.15), controlPoint2: CGPoint(x: 9.85, y: 44))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        fillColor.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 25, y: 13.89))
        bezier2Path.addCurve(to: CGPoint(x: 25, y: 14.55), controlPoint1: CGPoint(x: 25.4, y: 13.92), controlPoint2: CGPoint(x: 25.4, y: 14.35))
        bezier2Path.addCurve(to: CGPoint(x: 17.74, y: 14.75), controlPoint1: CGPoint(x: 24.73, y: 14.68), controlPoint2: CGPoint(x: 22.31, y: 14.74))
        bezier2Path.addCurve(to: CGPoint(x: 14.59, y: 14.7), controlPoint1: CGPoint(x: 16.33, y: 14.75), controlPoint2: CGPoint(x: 15.19, y: 14.74))
        bezier2Path.addLine(to: CGPoint(x: 14.61, y: 14.98))
        bezier2Path.addCurve(to: CGPoint(x: 14.6, y: 29.05), controlPoint1: CGPoint(x: 14.71, y: 17.93), controlPoint2: CGPoint(x: 14.33, y: 28.78))
        bezier2Path.addCurve(to: CGPoint(x: 29.72, y: 29.25), controlPoint1: CGPoint(x: 14.88, y: 29.33), controlPoint2: CGPoint(x: 27.34, y: 29.07))
        bezier2Path.addLine(to: CGPoint(x: 29.7, y: 28.82))
        bezier2Path.addLine(to: CGPoint(x: 29.68, y: 28.16))
        bezier2Path.addCurve(to: CGPoint(x: 30.08, y: 19), controlPoint1: CGPoint(x: 29.66, y: 26.26), controlPoint2: CGPoint(x: 29.77, y: 19.71))
        bezier2Path.addCurve(to: CGPoint(x: 30.8, y: 19), controlPoint1: CGPoint(x: 30.4, y: 18.29), controlPoint2: CGPoint(x: 30.8, y: 18.51))
        bezier2Path.addCurve(to: CGPoint(x: 30.77, y: 22.31), controlPoint1: CGPoint(x: 30.8, y: 19.32), controlPoint2: CGPoint(x: 30.79, y: 20.43))
        bezier2Path.addCurve(to: CGPoint(x: 30.41, y: 29.63), controlPoint1: CGPoint(x: 30.7, y: 25.97), controlPoint2: CGPoint(x: 30.56, y: 29.47))
        bezier2Path.addLine(to: CGPoint(x: 30.29, y: 29.74))
        bezier2Path.addCurve(to: CGPoint(x: 30.24, y: 29.79), controlPoint1: CGPoint(x: 30.27, y: 29.76), controlPoint2: CGPoint(x: 30.26, y: 29.77))
        bezier2Path.addLine(to: CGPoint(x: 30.15, y: 29.89))
        bezier2Path.addCurve(to: CGPoint(x: 30.08, y: 29.95), controlPoint1: CGPoint(x: 30.13, y: 29.91), controlPoint2: CGPoint(x: 30.11, y: 29.93))
        bezier2Path.addLine(to: CGPoint(x: 13.63, y: 30.03))
        bezier2Path.addCurve(to: CGPoint(x: 13.9, y: 14.27), controlPoint1: CGPoint(x: 13.32, y: 29.72), controlPoint2: CGPoint(x: 13.57, y: 14.59))
        bezier2Path.addLine(to: CGPoint(x: 14.03, y: 14.14))
        bezier2Path.addLine(to: CGPoint(x: 14.17, y: 14))
        bezier2Path.addCurve(to: CGPoint(x: 25, y: 13.89), controlPoint1: CGPoint(x: 21.12, y: 13.91), controlPoint2: CGPoint(x: 24.73, y: 13.87))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        fillColor2.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 18.94, y: 25.68))
        bezier3Path.addCurve(to: CGPoint(x: 18.5, y: 25.12), controlPoint1: CGPoint(x: 18.33, y: 25.86), controlPoint2: CGPoint(x: 18.33, y: 25.86))
        bezier3Path.addCurve(to: CGPoint(x: 32.07, y: 11.5), controlPoint1: CGPoint(x: 18.53, y: 24.98), controlPoint2: CGPoint(x: 31.63, y: 11.5))
        bezier3Path.addCurve(to: CGPoint(x: 32.5, y: 11.96), controlPoint1: CGPoint(x: 32.5, y: 11.5), controlPoint2: CGPoint(x: 32.5, y: 11.5))
        bezier3Path.addCurve(to: CGPoint(x: 18.94, y: 25.68), controlPoint1: CGPoint(x: 32.5, y: 12.42), controlPoint2: CGPoint(x: 19.08, y: 25.64))
        bezier3Path.close()
        bezier3Path.usesEvenOddFillRule = true
        fillColor2.setFill()
        bezier3Path.fill()
        
        context.restoreGState()

    }

    //// Generated Images

    @objc dynamic public class var imageOfHideListButton: UIImage {
        if Cache.imageOfHideListButton != nil {
            return Cache.imageOfHideListButton!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 44, height: 44), false, 0)
            PaintCode.drawHideListButton()

        Cache.imageOfHideListButton = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfHideListButton!
    }

    @objc dynamic public class var imageOfCancelButton: UIImage {
        if Cache.imageOfCancelButton != nil {
            return Cache.imageOfCancelButton!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 44, height: 44), false, 0)
            PaintCode.drawCancelButton()

        Cache.imageOfCancelButton = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfCancelButton!
    }

    @objc dynamic public class var imageOfSaveButton: UIImage {
        if Cache.imageOfSaveButton != nil {
            return Cache.imageOfSaveButton!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 44, height: 44), false, 0)
            PaintCode.drawSaveButton()

        Cache.imageOfSaveButton = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSaveButton!
    }

    @objc dynamic public class var imageOfShowListButton: UIImage {
        if Cache.imageOfShowListButton != nil {
            return Cache.imageOfShowListButton!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 44, height: 44), false, 0)
            PaintCode.drawShowListButton()

        Cache.imageOfShowListButton = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfShowListButton!
    }

    @objc dynamic public class var imageOfAddButton: UIImage {
        if Cache.imageOfAddButton != nil {
            return Cache.imageOfAddButton!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 44, height: 44), false, 0)
            PaintCode.drawAddButton()

        Cache.imageOfAddButton = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfAddButton!
    }

    @objc dynamic public class var imageOfPlusIconComic: UIImage {
        if Cache.imageOfPlusIconComic != nil {
            return Cache.imageOfPlusIconComic!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
            PaintCode.drawPlusIconComic()

        Cache.imageOfPlusIconComic = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfPlusIconComic!
    }

    @objc dynamic public class var imageOfEditIconComic: UIImage {
        if Cache.imageOfEditIconComic != nil {
            return Cache.imageOfEditIconComic!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
            PaintCode.drawEditIconComic()

        Cache.imageOfEditIconComic = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfEditIconComic!
    }

    @objc dynamic public class var imageOfPlusIcon: UIImage {
        if Cache.imageOfPlusIcon != nil {
            return Cache.imageOfPlusIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
            PaintCode.drawPlusIcon()

        Cache.imageOfPlusIcon = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfPlusIcon!
    }

    @objc dynamic public class var imageOfEditIcon: UIImage {
        if Cache.imageOfEditIcon != nil {
            return Cache.imageOfEditIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
            PaintCode.drawEditIcon()

        Cache.imageOfEditIcon = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfEditIcon!
    }

    @objc dynamic public class var imageOfEditIconActive: UIImage {
        if Cache.imageOfEditIconActive != nil {
            return Cache.imageOfEditIconActive!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
            PaintCode.drawEditIconActive()

        Cache.imageOfEditIconActive = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfEditIconActive!
    }

    @objc dynamic public class var imageOfPlusIconActive: UIImage {
        if Cache.imageOfPlusIconActive != nil {
            return Cache.imageOfPlusIconActive!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
            PaintCode.drawPlusIconActive()

        Cache.imageOfPlusIconActive = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfPlusIconActive!
    }

    @objc dynamic public class var imageOfEditIconSpread: UIImage {
        if Cache.imageOfEditIconSpread != nil {
            return Cache.imageOfEditIconSpread!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
            PaintCode.drawEditIconSpread()

        Cache.imageOfEditIconSpread = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfEditIconSpread!
    }

    @objc dynamic public class var imageOfAddButtonSmall: UIImage {
        if Cache.imageOfAddButtonSmall != nil {
            return Cache.imageOfAddButtonSmall!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
            PaintCode.drawAddButtonSmall()

        Cache.imageOfAddButtonSmall = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfAddButtonSmall!
    }

    @objc dynamic public class var imageOfEditSongButton: UIImage {
        if Cache.imageOfEditSongButton != nil {
            return Cache.imageOfEditSongButton!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 44, height: 44), false, 0)
            PaintCode.drawEditSongButton()

        Cache.imageOfEditSongButton = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfEditSongButton!
    }

    //// Customization Infrastructure

    @objc @IBOutlet dynamic var hideListButtonTargets: [AnyObject]! {
        get { return Cache.hideListButtonTargets }
        set {
            Cache.hideListButtonTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: PaintCode.imageOfHideListButton)
            }
        }
    }

    @objc @IBOutlet dynamic var cancelButtonTargets: [AnyObject]! {
        get { return Cache.cancelButtonTargets }
        set {
            Cache.cancelButtonTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: PaintCode.imageOfCancelButton)
            }
        }
    }

    @objc @IBOutlet dynamic var saveButtonTargets: [AnyObject]! {
        get { return Cache.saveButtonTargets }
        set {
            Cache.saveButtonTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: PaintCode.imageOfSaveButton)
            }
        }
    }

    @objc @IBOutlet dynamic var showListButtonTargets: [AnyObject]! {
        get { return Cache.showListButtonTargets }
        set {
            Cache.showListButtonTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: PaintCode.imageOfShowListButton)
            }
        }
    }

    @objc @IBOutlet dynamic var addButtonTargets: [AnyObject]! {
        get { return Cache.addButtonTargets }
        set {
            Cache.addButtonTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: PaintCode.imageOfAddButton)
            }
        }
    }

    @objc @IBOutlet dynamic var plusIconComicTargets: [AnyObject]! {
        get { return Cache.plusIconComicTargets }
        set {
            Cache.plusIconComicTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: PaintCode.imageOfPlusIconComic)
            }
        }
    }

    @objc @IBOutlet dynamic var editIconComicTargets: [AnyObject]! {
        get { return Cache.editIconComicTargets }
        set {
            Cache.editIconComicTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: PaintCode.imageOfEditIconComic)
            }
        }
    }

    @objc @IBOutlet dynamic var plusIconTargets: [AnyObject]! {
        get { return Cache.plusIconTargets }
        set {
            Cache.plusIconTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: PaintCode.imageOfPlusIcon)
            }
        }
    }

    @objc @IBOutlet dynamic var editIconTargets: [AnyObject]! {
        get { return Cache.editIconTargets }
        set {
            Cache.editIconTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: PaintCode.imageOfEditIcon)
            }
        }
    }

    @objc @IBOutlet dynamic var editIconActiveTargets: [AnyObject]! {
        get { return Cache.editIconActiveTargets }
        set {
            Cache.editIconActiveTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: PaintCode.imageOfEditIconActive)
            }
        }
    }

    @objc @IBOutlet dynamic var plusIconActiveTargets: [AnyObject]! {
        get { return Cache.plusIconActiveTargets }
        set {
            Cache.plusIconActiveTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: PaintCode.imageOfPlusIconActive)
            }
        }
    }

    @objc @IBOutlet dynamic var editIconSpreadTargets: [AnyObject]! {
        get { return Cache.editIconSpreadTargets }
        set {
            Cache.editIconSpreadTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: PaintCode.imageOfEditIconSpread)
            }
        }
    }

    @objc @IBOutlet dynamic var addButtonSmallTargets: [AnyObject]! {
        get { return Cache.addButtonSmallTargets }
        set {
            Cache.addButtonSmallTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: PaintCode.imageOfAddButtonSmall)
            }
        }
    }

    @objc @IBOutlet dynamic var editSongButtonTargets: [AnyObject]! {
        get { return Cache.editSongButtonTargets }
        set {
            Cache.editSongButtonTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: PaintCode.imageOfEditSongButton)
            }
        }
    }




    @objc(PaintCodeResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
