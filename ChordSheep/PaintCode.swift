//
//  PaintCode.swift
//  ChordSheep
//
//  Created by Lennart Wisbar on 14.02.20.
//  Copyright Â© 2020 Lennart Wisbar. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class PaintCode : NSObject {

    //// Cache

    private struct Cache {
        static let backgroundColor: UIColor = .csMediumDark
        static let iconColor: UIColor = .csLight
        static var imageOfHideListButton: UIImage?
        static var hideListButtonTargets: [AnyObject]?
        static var imageOfCancelButton: UIImage?
        static var cancelButtonTargets: [AnyObject]?
        static var imageOfSaveButton: UIImage?
        static var saveButtonTargets: [AnyObject]?
        static var imageOfShowListButton: UIImage?
        static var showListButtonTargets: [AnyObject]?
    }

    //// Colors

    @objc dynamic public class var backgroundColor: UIColor { return Cache.backgroundColor }
    @objc dynamic public class var iconColor: UIColor { return Cache.iconColor }

    //// Drawing Methods

    @objc dynamic public class func drawHideListButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 44, height: 44), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 44, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 44, y: resizedFrame.height / 44)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 22, y: 44))
        bezierPath.addCurve(to: CGPoint(x: 44, y: 22), controlPoint1: CGPoint(x: 34.15, y: 44), controlPoint2: CGPoint(x: 44, y: 34.15))
        bezierPath.addCurve(to: CGPoint(x: 22, y: 0), controlPoint1: CGPoint(x: 44, y: 9.85), controlPoint2: CGPoint(x: 34.15, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 22), controlPoint1: CGPoint(x: 9.85, y: 0), controlPoint2: CGPoint(x: 0, y: 9.85))
        bezierPath.addCurve(to: CGPoint(x: 22, y: 44), controlPoint1: CGPoint(x: 0, y: 34.15), controlPoint2: CGPoint(x: 9.85, y: 44))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        PaintCode.backgroundColor.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 29, y: 22))
        bezier2Path.addCurve(to: CGPoint(x: 18.46, y: 32), controlPoint1: CGPoint(x: 29, y: 22.43), controlPoint2: CGPoint(x: 18.92, y: 32))
        bezier2Path.addCurve(to: CGPoint(x: 18, y: 31.57), controlPoint1: CGPoint(x: 18, y: 32), controlPoint2: CGPoint(x: 18, y: 32))
        bezier2Path.addCurve(to: CGPoint(x: 27.62, y: 22), controlPoint1: CGPoint(x: 18, y: 31.13), controlPoint2: CGPoint(x: 27.62, y: 22.43))
        bezier2Path.addCurve(to: CGPoint(x: 18, y: 12.43), controlPoint1: CGPoint(x: 27.62, y: 21.57), controlPoint2: CGPoint(x: 18, y: 12.87))
        bezier2Path.addCurve(to: CGPoint(x: 18.46, y: 12), controlPoint1: CGPoint(x: 18, y: 12), controlPoint2: CGPoint(x: 18, y: 12))
        bezier2Path.addCurve(to: CGPoint(x: 29, y: 22), controlPoint1: CGPoint(x: 18.92, y: 12), controlPoint2: CGPoint(x: 29, y: 21.57))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        PaintCode.iconColor.setFill()
        bezier2Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawCancelButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 44, height: 44), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 44, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 44, y: resizedFrame.height / 44)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 22, y: 44))
        bezierPath.addCurve(to: CGPoint(x: 44, y: 22), controlPoint1: CGPoint(x: 34.15, y: 44), controlPoint2: CGPoint(x: 44, y: 34.15))
        bezierPath.addCurve(to: CGPoint(x: 22, y: 0), controlPoint1: CGPoint(x: 44, y: 9.85), controlPoint2: CGPoint(x: 34.15, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 22), controlPoint1: CGPoint(x: 9.85, y: 0), controlPoint2: CGPoint(x: 0, y: 9.85))
        bezierPath.addCurve(to: CGPoint(x: 22, y: 44), controlPoint1: CGPoint(x: 0, y: 34.15), controlPoint2: CGPoint(x: 9.85, y: 44))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        PaintCode.backgroundColor.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 13.96, y: 14))
        bezier2Path.addCurve(to: CGPoint(x: 22, y: 21.37), controlPoint1: CGPoint(x: 14.35, y: 14), controlPoint2: CGPoint(x: 20.23, y: 19.45))
        bezier2Path.addCurve(to: CGPoint(x: 30.04, y: 14), controlPoint1: CGPoint(x: 23.77, y: 19.45), controlPoint2: CGPoint(x: 29.65, y: 14))
        bezier2Path.addCurve(to: CGPoint(x: 30.5, y: 14.43), controlPoint1: CGPoint(x: 30.5, y: 14), controlPoint2: CGPoint(x: 30.5, y: 14))
        bezier2Path.addCurve(to: CGPoint(x: 22.88, y: 22), controlPoint1: CGPoint(x: 30.5, y: 14.87), controlPoint2: CGPoint(x: 22.88, y: 21.57))
        bezier2Path.addCurve(to: CGPoint(x: 30.5, y: 29.57), controlPoint1: CGPoint(x: 22.88, y: 22.43), controlPoint2: CGPoint(x: 30.5, y: 29.13))
        bezier2Path.addCurve(to: CGPoint(x: 30.04, y: 30), controlPoint1: CGPoint(x: 30.5, y: 30), controlPoint2: CGPoint(x: 30.5, y: 30))
        bezier2Path.addCurve(to: CGPoint(x: 22, y: 22.63), controlPoint1: CGPoint(x: 29.65, y: 30), controlPoint2: CGPoint(x: 23.77, y: 24.55))
        bezier2Path.addCurve(to: CGPoint(x: 13.96, y: 30), controlPoint1: CGPoint(x: 20.23, y: 24.55), controlPoint2: CGPoint(x: 14.35, y: 30))
        bezier2Path.addCurve(to: CGPoint(x: 13.5, y: 29.57), controlPoint1: CGPoint(x: 13.5, y: 30), controlPoint2: CGPoint(x: 13.5, y: 30))
        bezier2Path.addCurve(to: CGPoint(x: 21.12, y: 22), controlPoint1: CGPoint(x: 13.5, y: 29.13), controlPoint2: CGPoint(x: 21.12, y: 22.43))
        bezier2Path.addCurve(to: CGPoint(x: 13.5, y: 14.43), controlPoint1: CGPoint(x: 21.12, y: 21.57), controlPoint2: CGPoint(x: 13.5, y: 14.87))
        bezier2Path.addCurve(to: CGPoint(x: 13.96, y: 14), controlPoint1: CGPoint(x: 13.5, y: 14), controlPoint2: CGPoint(x: 13.5, y: 14))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        PaintCode.iconColor.setFill()
        bezier2Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSaveButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 44, height: 44), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 44, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 44, y: resizedFrame.height / 44)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 22, y: 44))
        bezierPath.addCurve(to: CGPoint(x: 44, y: 22), controlPoint1: CGPoint(x: 34.15, y: 44), controlPoint2: CGPoint(x: 44, y: 34.15))
        bezierPath.addCurve(to: CGPoint(x: 22, y: 0), controlPoint1: CGPoint(x: 44, y: 9.85), controlPoint2: CGPoint(x: 34.15, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 22), controlPoint1: CGPoint(x: 9.85, y: 0), controlPoint2: CGPoint(x: 0, y: 9.85))
        bezierPath.addCurve(to: CGPoint(x: 22, y: 44), controlPoint1: CGPoint(x: 0, y: 34.15), controlPoint2: CGPoint(x: 9.85, y: 44))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        PaintCode.backgroundColor.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 20, y: 29.5))
        bezier2Path.addCurve(to: CGPoint(x: 12, y: 20.96), controlPoint1: CGPoint(x: 19.57, y: 29.5), controlPoint2: CGPoint(x: 12, y: 21.42))
        bezier2Path.addCurve(to: CGPoint(x: 12.43, y: 20.5), controlPoint1: CGPoint(x: 12, y: 20.5), controlPoint2: CGPoint(x: 12, y: 20.5))
        bezier2Path.addCurve(to: CGPoint(x: 20, y: 28.12), controlPoint1: CGPoint(x: 12.87, y: 20.5), controlPoint2: CGPoint(x: 19.57, y: 28.12))
        bezier2Path.addCurve(to: CGPoint(x: 33.57, y: 14.5), controlPoint1: CGPoint(x: 20.43, y: 28.12), controlPoint2: CGPoint(x: 33.13, y: 14.5))
        bezier2Path.addCurve(to: CGPoint(x: 34, y: 14.96), controlPoint1: CGPoint(x: 34, y: 14.5), controlPoint2: CGPoint(x: 34, y: 14.5))
        bezier2Path.addCurve(to: CGPoint(x: 20, y: 29.5), controlPoint1: CGPoint(x: 34, y: 15.42), controlPoint2: CGPoint(x: 20.43, y: 29.5))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        PaintCode.iconColor.setFill()
        bezier2Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawShowListButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 44, height: 44), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 44, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 44, y: resizedFrame.height / 44)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 22, y: 44))
        bezierPath.addCurve(to: CGPoint(x: 44, y: 22), controlPoint1: CGPoint(x: 34.15, y: 44), controlPoint2: CGPoint(x: 44, y: 34.15))
        bezierPath.addCurve(to: CGPoint(x: 22, y: 0), controlPoint1: CGPoint(x: 44, y: 9.85), controlPoint2: CGPoint(x: 34.15, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 22), controlPoint1: CGPoint(x: 9.85, y: 0), controlPoint2: CGPoint(x: 0, y: 9.85))
        bezierPath.addCurve(to: CGPoint(x: 22, y: 44), controlPoint1: CGPoint(x: 0, y: 34.15), controlPoint2: CGPoint(x: 9.85, y: 44))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        PaintCode.backgroundColor.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 15, y: 22))
        bezier2Path.addCurve(to: CGPoint(x: 25.54, y: 12), controlPoint1: CGPoint(x: 15, y: 21.57), controlPoint2: CGPoint(x: 25.08, y: 12))
        bezier2Path.addCurve(to: CGPoint(x: 26, y: 12.43), controlPoint1: CGPoint(x: 26, y: 12), controlPoint2: CGPoint(x: 26, y: 12))
        bezier2Path.addCurve(to: CGPoint(x: 16.38, y: 22), controlPoint1: CGPoint(x: 26, y: 12.87), controlPoint2: CGPoint(x: 16.38, y: 21.57))
        bezier2Path.addCurve(to: CGPoint(x: 26, y: 31.57), controlPoint1: CGPoint(x: 16.38, y: 22.43), controlPoint2: CGPoint(x: 26, y: 31.13))
        bezier2Path.addCurve(to: CGPoint(x: 25.54, y: 32), controlPoint1: CGPoint(x: 26, y: 32), controlPoint2: CGPoint(x: 26, y: 32))
        bezier2Path.addCurve(to: CGPoint(x: 15, y: 22), controlPoint1: CGPoint(x: 25.08, y: 32), controlPoint2: CGPoint(x: 15, y: 22.43))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        PaintCode.iconColor.setFill()
        bezier2Path.fill()
        
        context.restoreGState()

    }

    //// Generated Images

    @objc dynamic public class var imageOfHideListButton: UIImage {
        if Cache.imageOfHideListButton != nil {
            return Cache.imageOfHideListButton!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 44, height: 44), false, 0)
            PaintCode.drawHideListButton()

        Cache.imageOfHideListButton = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfHideListButton!
    }

    @objc dynamic public class var imageOfCancelButton: UIImage {
        if Cache.imageOfCancelButton != nil {
            return Cache.imageOfCancelButton!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 44, height: 44), false, 0)
            PaintCode.drawCancelButton()

        Cache.imageOfCancelButton = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfCancelButton!
    }

    @objc dynamic public class var imageOfSaveButton: UIImage {
        if Cache.imageOfSaveButton != nil {
            return Cache.imageOfSaveButton!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 44, height: 44), false, 0)
            PaintCode.drawSaveButton()

        Cache.imageOfSaveButton = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSaveButton!
    }

    @objc dynamic public class var imageOfShowListButton: UIImage {
        if Cache.imageOfShowListButton != nil {
            return Cache.imageOfShowListButton!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 44, height: 44), false, 0)
            PaintCode.drawShowListButton()

        Cache.imageOfShowListButton = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfShowListButton!
    }

    //// Customization Infrastructure

    @objc @IBOutlet dynamic var hideListButtonTargets: [AnyObject]! {
        get { return Cache.hideListButtonTargets }
        set {
            Cache.hideListButtonTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: PaintCode.imageOfHideListButton)
            }
        }
    }

    @objc @IBOutlet dynamic var cancelButtonTargets: [AnyObject]! {
        get { return Cache.cancelButtonTargets }
        set {
            Cache.cancelButtonTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: PaintCode.imageOfCancelButton)
            }
        }
    }

    @objc @IBOutlet dynamic var saveButtonTargets: [AnyObject]! {
        get { return Cache.saveButtonTargets }
        set {
            Cache.saveButtonTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: PaintCode.imageOfSaveButton)
            }
        }
    }

    @objc @IBOutlet dynamic var showListButtonTargets: [AnyObject]! {
        get { return Cache.showListButtonTargets }
        set {
            Cache.showListButtonTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: PaintCode.imageOfShowListButton)
            }
        }
    }




    @objc(PaintCodeResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
